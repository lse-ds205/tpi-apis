{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"Ascor_EP/","title":"ASCOR Endpoints","text":"<p>The Transition Pathway Initiative\u2019s ASCOR (Assessing Sovereign Climate-related Opportunities and Risks) framework evaluates how national governments plan, manage, and finance their transition to a low-carbon economy. ASCOR assessments cover three pillars:</p> <ul> <li> <p>Emissions Pledges (EP): The strength and clarity of a country\u2019s formal emissions reduction targets.</p> </li> <li> <p>Carbon Performance (CP): Progress against those targets, measuring actual emissions trajectories.</p> </li> <li> <p>Climate Finance (CF): Public and private financing commitments supporting climate-related activities.</p> </li> </ul> <p>Assessment data is sourced directly from government documents, financial disclosures, and reputable climate reports. Each country-year combination yields a structured dataset showing high-level pillar scores and detailed sub-indicators, allowing comparisons across nations and over time.</p> <p>These endpoints let you interact with that data in two ways: one to list all countries with available ASCOR results, and another to fetch the full pillar- and indicator-level assessment for a specific country and year (Emissions Pledges, Carbon Performance, and Climate Finance) for a specific country and assessment year.</p>"},{"location":"Ascor_EP/#1-list-available-countries","title":"1. List Available Countries","text":"<p>HTTP Method: GET</p> <p>Path: <code>/v1/countries</code></p> <p>Purpose: Returns a list of all countries for which ASCOR data is available.</p> <p>Response Model: Returns a JSON object where:</p> <ul> <li><code>countries</code>: array of strings (country names)</li> </ul> <p>Example Request:</p> <pre><code>curl -X GET \"https://api.example.com/v1/countries\"\n</code></pre> <p>Example Response:</p> <pre><code>HTTP/1.1 200 OK\n{\n  \"countries\": [\n    \"United Kingdom\",\n    \"France\",\n    \"Germany\",\n    \u2026\n  ]\n}\n</code></pre> <p>Error Responses:</p> <ul> <li> <p>500 Internal Server Error: dataset missing or processing error.</p> <p><code>json { \"detail\": \"&lt;error message&gt;\" }</code></p> </li> </ul>"},{"location":"Ascor_EP/#2-retrieve-country-assessment-data","title":"2. Retrieve Country Assessment Data","text":"<p>HTTP Method: GET</p> <p>Path: <code>/v1/country-data/{country}/{assessment_year}</code></p> <p>Purpose: Fetch the detailed ASCOR assessment for a specific country and year, including all three pillars (EP, CP, CF) with nested areas, indicators, and metrics.</p> <p>Response Model: This endpoint returns a JSON object defined by the <code>CountryDataResponse</code> Pydantic model<sup>1</sup>, which includes:</p> <ul> <li><code>country</code>: string</li> <li><code>assessment_year</code>: integer</li> <li><code>pillars</code>: array of objects, each with:<ul> <li><code>name</code>: \u201cEP\u201d | \u201cCP\u201d | \u201cCF\u201d</li> <li><code>areas</code>: array of objects, each with:<ul> <li><code>name</code>: string (e.g. \u201cEP.1\u201d)</li> <li><code>assessment</code>: string (\u201cGood\u201d, \u201cPartial\u201d, etc.)</li> <li><code>indicators</code>: array of objects, each with:<ul> <li><code>name</code>: string (e.g. \u201cEP.1.1\u201d)</li> <li><code>assessment</code>: string</li> <li><code>metrics</code>: array of metric objects:<ul> <li><code>name</code>: string (e.g. \u201cEP.1.1.1\u201d)</li> <li><code>value</code>: string (e.g. \u201c45%\u201d)</li> </ul> </li> <li><code>source</code>:<ul> <li><code>source_name</code>: string</li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> Parameter In Type Required Description <code>country</code> path string Yes Country name (case-insensitive) <code>assessment_year</code> path int Yes Year of assessment (e.g. 2023 or 2024) <p>Example Request:</p> <pre><code>curl -X GET \"https://api.example.com/v1/country-data/France/2023\"\n</code></pre> <p>Example Response:</p> <pre><code>HTTP/1.1 200 OK\n{\n  \"country\": \"france\",\n  \"assessment_year\": 2023,\n  \"pillars\": [\n    {\n      \"name\": \"EP\",\n      \"areas\": [\n        {\n          \"name\": \"EP.1\",\n          \"assessment\": \"Good\",\n          \"indicators\": [\n            {\n              \"name\": \"EP.1.1\",\n              \"assessment\": \"Good\",\n              \"metrics\": [\n                { \"name\": \"EP.1.1.1\", \"value\": \"45%\", \"source\": { \"source_name\": \"Report\" } }\n              ],\n              \"source\": { \"source_name\": \"Source 1\" }\n            },\n            \u2026\n          ]\n        },\n        \u2026\n      ]\n    },\n    { \"name\": \"CP\", \u2026 },\n    { \"name\": \"CF\", \u2026 }\n  ]\n}\n</code></pre> <p>Error Responses:</p> <ul> <li> <p>404 Not Found: no data for given country/year.</p> <p><code>json { \"detail\": \"No data found for country=Belgium in year=2024\" }</code></p> </li> <li> <p>500 Internal Server Error: unexpected processing error.</p> <p><code>json { \"detail\": \"Unexpected server error.\" }</code></p> </li> </ul>"},{"location":"Ascor_EP/#design-notes","title":"Design Notes","text":"<ul> <li>Country names are matched case-insensitively and trimmed of whitespace.</li> <li>Assessment year must match the year of the <code>Assessment date</code> column after parsing.</li> <li>The endpoint always returns all three pillars in a single structured payload.</li> <li>Rate-limited to 100 requests/minute per IP to ensure fairness.</li> </ul> <ol> <li> <p>Pydantic is a Python library for data validation and settings management using Python type annotations. It ensures that all input and output data conform to the defined schema, reducing runtime errors and improving code clarity.\u00a0\u21a9</p> </li> </ol>"},{"location":"CP_EP/","title":"CP Endpoints","text":"<p>The Carbon Performance (CP) endpoints expose company-level alignment against decadal emissions targets (2025, 2027, 2035, 2050). Use these routes to:</p> <ol> <li>Retrieve the latest CP scores for every company in a paginated list</li> <li>Fetch the full time-series of CP assessments for a single company</li> <li>Get a simple year-to-alignment map for a company\u2019s most recent assessment</li> <li>Compare the two most recent CP assessments for a company</li> </ol> <p>All responses conform to Pydantic models for strict validation and predictable JSON shapes<sup>1</sup>.</p>"},{"location":"CP_EP/#1-list-companies","title":"1. List Companies","text":"<p>HTTP Method: GET</p> <p>Path: /v1/cp/latest</p> <p>Purpose: Return the most recent CP assessment for each company, with alignment status for key target years.</p> <p>Parameters:</p> Name In Type Required Description <code>page</code> query integer No Page number (1-based; default: 1) <code>page_size</code> query integer No Results per page (1\u2013100; default: 10) Company filters (see below) query various No Optional filters (geography, sector, CA100, ISIN, SEDOL, etc.) to narrow list <p>Company filters: <code>geography</code>, <code>geography_code</code>, <code>sector</code>, <code>ca100_focus_company</code>, <code>large_medium_classification</code>, <code>isins</code> (string or array), <code>sedol</code> (string or array)</p> <p>Response Format: An array of <code>CPAssessmentDetail</code> objects, each with:</p> <ul> <li><code>company_id</code> (string)  </li> <li><code>name</code> (string)  </li> <li><code>sector</code> (string or null)  </li> <li><code>geography</code> (string or null)  </li> <li><code>latest_assessment_year</code> (integer)  </li> <li><code>carbon_performance_2025</code> (string)  </li> <li><code>carbon_performance_2027</code> (string)  </li> <li><code>carbon_performance_2035</code> (string)  </li> <li><code>carbon_performance_2050</code> (string)  </li> </ul> <pre><code>[\n  {\n    \"company_id\": \"acme_corp\",\n    \"name\": \"Acme Corporation\",\n    \"sector\": \"Energy\",\n    \"geography\": \"United Kingdom\",\n    \"latest_assessment_year\": 2024,\n    \"carbon_performance_2025\": \"Aligned\",\n    \"carbon_performance_2027\": \"Partially Aligned\",\n    \"carbon_performance_2035\": \"Aligned\",\n    \"carbon_performance_2050\": \"Not Aligned\"\n  },\n  ...\n]\n</code></pre> <p>Error Responses: </p> <ul> <li> <p>500 Internal Server Error </p> <p><code>json { \"detail\": \"&lt;error message&gt;\" }</code></p> </li> </ul>"},{"location":"CP_EP/#2-retrieve-company-cp-history","title":"2. Retrieve Company CP History","text":"<p>HTTP Method: <code>GET</code> </p> <p>Path: <code>/v1/cp/company/{company_id}</code></p> <p>Purpose: Return every CP assessment ever recorded for the given company, across all cycles.</p> <p>Parameters:</p> Name In Type Required Description <code>company_id</code> path string Yes Normalized company identifier (e.g. <code>acme_corp</code>) <p>You may also apply the same Company filters as in the \u201cList\u201d endpoint to further narrow results.</p> <p>Response Format: An array of <code>CPAssessmentDetail</code> objects (same fields as above), ordered by assessment date.</p> <pre><code>[\n  {\n    \"company_id\": \"acme_corp\",\n    \"name\": \"Acme Corporation\",\n    \"sector\": \"Energy\",\n    \"geography\": \"United Kingdom\",\n    \"latest_assessment_year\": 2023,\n    \"carbon_performance_2025\": \"Partially Aligned\",\n    \"carbon_performance_2027\": \"Not Aligned\",\n    \"carbon_performance_2035\": \"Partially Aligned\",\n    \"carbon_performance_2050\": \"Not Aligned\"\n  },\n  {\n    \"company_id\": \"acme_corp\",\n    \"name\": \"Acme Corporation\",\n    \"sector\": \"Energy\",\n    \"geography\": \"United Kingdom\",\n    \"latest_assessment_year\": 2024,\n    \"carbon_performance_2025\": \"Aligned\",\n    \"carbon_performance_2027\": \"Partially Aligned\",\n    \"carbon_performance_2035\": \"Aligned\",\n    \"carbon_performance_2050\": \"Not Aligned\"\n  }\n]\n</code></pre> <p>Error Responses:</p> <ul> <li> <p>404 Not Found: no data for given country/year.</p> <p><code>json { \"detail\": \"No data found for country=Belgium in year=2024\" }</code></p> </li> <li> <p>500 Internal Server Error: unexpected processing error.</p> <p><code>json { \"detail\": \"Unexpected server error.\" }</code></p> </li> </ul>"},{"location":"CP_EP/#3-retrieve-company-cp-alignment","title":"3. Retrieve Company CP Alignment","text":"<p>HTTP Method: <code>GET</code> </p> <p>Path: <code>/v1/cp/company/{company_id}/alignment</code></p> <p>Purpose: Fetch the company's latest alignment status for each target year as a simple key\u2013value map.</p> <p>Parameters:</p> Name In Type Required Description <code>company_id</code> path string Yes Normalized company identifier (e.g. <code>acme_corp</code>) <p>You may also apply the same Company filters as in the \u201cList\u201d endpoint to further narrow results.</p> <p>Response Format: A JSON object with keys for each target year:</p> <pre><code>{\n  \"2025\": \"Aligned\",\n  \"2027\": \"Partially Aligned\",\n  \"2035\": \"Aligned\",\n  \"2050\": \"Not Aligned\"\n}\n</code></pre> <p>Error Responses:</p> <ul> <li> <p>404 Not Found: no data for given country/year.</p> <p><code>json { \"detail\": \"No data found for country=Belgium in year=2024\" }</code></p> </li> <li> <p>500 Internal Server Error: unexpected processing error.</p> <p><code>json { \"detail\": \"Unexpected server error.\" }</code></p> </li> </ul>"},{"location":"CP_EP/#4-compare-company-cp-performance","title":"4. Compare Company CP Performance","text":"<p>HTTP Method: <code>GET</code> </p> <p>Path: <code>/v1/cp/company/{company_id}/comparison</code></p> <p>Purpose: Compare the two most recent CP assessments for a company and show changes in alignment.</p> <p>Parameters: Same as Retrieve Company CP History.</p> Name In Type Required Description <code>company_id</code> path string Yes Normalized company identifier (e.g. <code>acme_corp</code>) <p>You may also apply the same Company filters as in the \u201cList\u201d endpoint to further narrow results.</p> <p>Response Format: Returns one of two models:</p> <ul> <li> <p>CPComparisonResponse when \u22652 records exist:</p> <p><code>json {   \"company_id\": \"acme_corp\",   \"current_year\": 2024,   \"previous_year\": 2023,   \"latest_cp_2025\": \"Aligned\",   \"previous_cp_2025\": \"Partially Aligned\",   \"latest_cp_2035\": \"Aligned\",   \"previous_cp_2035\": \"Partially Aligned\" }</code></p> </li> <li> <p>PerformanceComparisonInsufficientDataResponse when &lt;2 records:</p> <p><code>json {   \"company_id\": \"acme_corp\",   \"message\": \"Only one record exists for 'acme_corp', so performance comparison is not available\",   \"available_assessment_years\": [2024] }</code></p> </li> </ul> <p>Error Responses:</p> <ul> <li> <p>404 Not Found: company not found.</p> <p><code>json { \"detail\": \"Company 'unknown_id' not found.\" }</code></p> </li> <li> <p>500 Internal Server Error: unexpected processing error.</p> <p><code>json { \"detail\": \"&lt;error message&gt;\" }</code></p> </li> </ul>"},{"location":"CP_EP/#design-notes","title":"Design Notes","text":"<ul> <li>The latest endpoint is rate-limited more strictly (2 calls/minute) because it scans the full dataset for each company.</li> <li>All company filters (<code>geography</code>, <code>sector</code>, <code>isins</code>, etc.) apply to history and list endpoints.</li> <li>Paths use normalized company IDs (lowercase, underscores) to ensure URL safety.</li> <li>Responses rely on the <code>CPHandler</code> logic to combine multiple CSV cycles and always validate against Pydantic schemas.</li> </ul> <ol> <li> <p>Pydantic is a Python library for data validation and settings management using Python type annotations. It ensures that all input and output data conform to the defined schema, reducing runtime errors and improving code clarity.\u00a0\u21a9</p> </li> </ol>"},{"location":"Company_EP/","title":"Company Endpoints","text":"<p>These endpoints provide corporate climate assessments combining Management Quality (MQ) and Carbon Performance (CP) metrics for publicly listed companies. You can:</p> <ol> <li>List all companies with their latest assessment year and basic info  </li> <li>Retrieve the latest MQ &amp; CP scores for a single company  </li> <li>Fetch the full historical record of MQ &amp; CP assessments for one company  </li> <li>Compare the two most recent assessment cycles for a company  </li> </ol> <p>All responses are validated against Pydantic models to ensure consistent data shapes and reduce integration errors<sup>1</sup>.</p>"},{"location":"Company_EP/#1-list-companies","title":"1. List Companies","text":"<p>HTTP Method: GET  </p> <p>Path: <code>/v1/companies</code> </p> <p>Purpose: Return a paginated list of companies including their unique ID, name, sector, geography, and latest assessment year.</p> <p>Parameters:</p> Name In Type Required Description <code>page</code> query int No Page number (1-based; default: 1) <code>per_page</code> query int No Results per page (1\u2013100; default: 10) <code>geography</code> query string No Filter by country or region name <code>geography_code</code> query string No Filter by ISO geography code (e.g. \"USA\") <code>sector</code> query string No Filter by industry sector (e.g. \"Cement\") <code>ca100_focus_company</code> query boolean No <code>true</code> to include only CA100 focus companies, <code>false</code> to exclude them <code>large_medium_classification</code> query string No Filter by size classification (\"Large\" or \"Medium\") <code>isins</code> query string or array of strings No Filter by one or more ISIN identifiers <code>sedol</code> query string or array of strings No Filter by one or more SEDOL identifiers <p>Response Format: Returns a <code>CompanyListResponse</code> object:</p> <ul> <li><code>total</code>: integer \u2014 total number of matching companies  </li> <li><code>page</code>: integer \u2014 current page number  </li> <li><code>per_page</code>: integer \u2014 items per page  </li> <li><code>companies</code>: array of objects, each with:<ul> <li><code>company_id</code>: string</li> <li><code>name</code>: string</li> <li><code>sector</code>: string or null</li> <li><code>geography</code>: string or null</li> <li><code>latest_assessment_year</code>: integer or null</li> </ul> </li> </ul> <pre><code>{\n  \"total\": 234,\n  \"page\": 1,\n  \"per_page\": 10,\n  \"companies\": [\n    {\n      \"company_id\": \"acme_corp\",\n      \"name\": \"Acme Corporation\",\n      \"sector\": \"Energy\",\n      \"geography\": \"United Kingdom\",\n      \"latest_assessment_year\": 2024\n    },\n    ...\n  ]\n}\n</code></pre> <p>Error Responses: </p> <ul> <li> <p>503 Service Unavailable </p> <p><code>json { \"detail\": \"Company dataset is not loaded. Please ensure the data file exists.\" }</code> </p> </li> <li> <p>500 Internal Server Error </p> <p><code>json { \"detail\": \"&lt;error message&gt;\" }</code></p> </li> </ul>"},{"location":"Company_EP/#2-retrieve-company-details","title":"2. Retrieve Company Details","text":"<p>HTTP Method: GET  </p> <p>Path: <code>/v1/company/{company_id}</code> </p> <p>Purpose: Fetch the latest MQ score, 2035 CP alignment, and emissions trend for the specified company.</p> <p>Parameters:</p> Name In Type Required Description <code>company_id</code> path string Yes Normalized company identifier (e.g. \"acme_corp\") <p>Response Format: Returns a <code>CompanyDetail</code> object:</p> <ul> <li><code>company_id</code>: string  </li> <li><code>name</code>: string  </li> <li><code>sector</code>: string or null  </li> <li><code>geography</code>: string or null  </li> <li><code>latest_assessment_year</code>: integer or null  </li> <li><code>management_quality_score</code>: float or null  </li> <li><code>carbon_performance_alignment_2035</code>: string or null  </li> <li><code>emissions_trend</code>: string or null</li> </ul> <pre><code>{\n  \"company_id\": \"acme_corp\",\n  \"name\": \"Acme Corporation\",\n  \"sector\": \"Energy\",\n  \"geography\": \"United Kingdom\",\n  \"latest_assessment_year\": 2024,\n  \"management_quality_score\": 3.5,\n  \"carbon_performance_alignment_2035\": \"Aligned\",\n  \"emissions_trend\": \"Improving\"\n}\n</code></pre> <p>Error Responses: </p> <ul> <li> <p>404 Not Found </p> <p><code>json { \"detail\": \"Company 'unknown_id' not found.\" }</code> </p> </li> <li> <p>500 Internal Server Error </p> <p><code>json { \"detail\": \"&lt;error message&gt;\" }</code></p> </li> </ul>"},{"location":"Company_EP/#3-retrieve-company-history","title":"3. Retrieve Company History","text":"<p>HTTP Method: GET  </p> <p>Path: <code>/v1/company/{company_id}/history</code> </p> <p>Purpose: Return a chronological list of all past MQ and CP assessments for the company.</p> <p>Parameters: Same as Retrieve Company Details.</p> <p>Response Format: Returns a <code>CompanyHistoryResponse</code> object:</p> <ul> <li><code>company_id</code>: string  </li> <li><code>history</code>: array of <code>CompanyDetail</code> objects (one per assessment cycle)</li> </ul> <pre><code>{\n  \"company_id\": \"acme_corp\",\n  \"history\": [\n    {\n      \"company_id\": \"acme_corp\",\n      \"name\": \"Acme Corporation\",\n      \"sector\": \"Energy\",\n      \"geography\": \"United Kingdom\",\n      \"latest_assessment_year\": 2023,\n      \"management_quality_score\": 3.2,\n      \"carbon_performance_alignment_2035\": \"Partially Aligned\",\n      \"emissions_trend\": \"Stable\"\n    },\n    {\n      \"company_id\": \"acme_corp\",\n      \"name\": \"Acme Corporation\",\n      \"sector\": \"Energy\",\n      \"geography\": \"United Kingdom\",\n      \"latest_assessment_year\": 2024,\n      \"management_quality_score\": 3.5,\n      \"carbon_performance_alignment_2035\": \"Aligned\",\n      \"emissions_trend\": \"Improving\"\n    }\n  ]\n}\n</code></pre> <p>Error Responses: </p> <ul> <li> <p>404 Not Found </p> <p><code>json { \"detail\": \"No history found for company 'unknown_id'.\" }</code> </p> </li> <li> <p>503 Service Unavailable </p> <p><code>json { \"detail\": \"Column 'MQ Assessment Date' not found in dataset. Check CSV structure.\" }</code> </p> </li> <li> <p>500 Internal Server Error </p> <p><code>json { \"detail\": \"&lt;error message&gt;\" }</code></p> </li> </ul>"},{"location":"Company_EP/#4-compare-company-performance","title":"4. Compare Company Performance","text":"<p>HTTP Method: GET  </p> <p>Path: <code>/v1/company/{company_id}/performance-comparison</code> </p> <p>Purpose: Compare the two most recent MQ &amp; CP assessments for the specified company to show year-over-year change.</p> <p>Parameters: Same as Retrieve Company Details.</p> <p>Response Format: Returns either:</p> <ul> <li><code>PerformanceComparisonResponse</code> object when at least two records exist:</li> </ul> <pre><code>    {\n      \"company_id\": \"acme_corp\",\n      \"current_year\": 2024,\n      \"previous_year\": 2023,\n      \"latest_mq_score\": 3.5,\n      \"previous_mq_score\": 3.2,\n      \"latest_cp_alignment\": \"Aligned\",\n      \"previous_cp_alignment\": \"Partially Aligned\"\n    }\n</code></pre> <p>or</p> <ul> <li><code>PerformanceComparisonInsufficientDataResponse</code> when fewer than two assessments exist:</li> </ul> <pre><code>  {\n    \"company_id\": \"acme_corp\",\n    \"message\": \"Only one record exists for 'acme_corp', so performance comparison is not possible.\",\n    \"available_assessment_years\": [2024]\n  }\n</code></pre> <p>Error Responses: </p> <ul> <li> <p>404 Not Found </p> <p><code>json { \"detail\": \"Company 'unknown_id' not found.\" }</code> </p> </li> <li> <p>500 Internal Server Error </p> <p><code>json { \"detail\": \"&lt;error message&gt;\" }</code></p> </li> </ul>"},{"location":"Company_EP/#design-notes","title":"Design Notes","text":"<ul> <li>All endpoints default to the latest available assessment unless you explicitly request history or comparison.  </li> <li>Company identifiers are normalized (lowercase, underscores) for URL safety.  </li> <li>Filtering on list routes uses the same Pydantic-based <code>CompanyFilters</code> model as other endpoints.  </li> <li>Rate-limited to 100 requests per minute per IP by default.</li> </ul> <ol> <li> <p>Pydantic is a Python library for data validation and settings management using Python type annotations. It ensures that all input and output data conform to the defined schema, reducing runtime errors and improving code clarity.\u00a0\u21a9</p> </li> </ol>"},{"location":"MQ_EP/","title":"MQ Endpoints","text":"<p>The Management Quality (MQ) endpoints deliver governance-focused climate ratings derived from successive assessment cycles. You can:</p> <ol> <li>List the latest MQ scores across all companies, with pagination  </li> <li>Retrieve MQ assessments for a specific research methodology cycle  </li> <li>Fetch MQ score trends over time for all companies in a given sector  </li> </ol> <p>All responses conform to Pydantic models for strict validation and predictable JSON shapes<sup>1</sup>.</p>"},{"location":"MQ_EP/#1-list-latest-mq-assessments","title":"1. List Latest MQ Assessments","text":"<p>HTTP Method: GET  </p> <p>Path: <code>/v1/mq/latest</code> </p> <p>Purpose: Return the most recent MQ assessment for each company, mapping STAR ratings (\u201c0STAR\u201d\u2013\u201c5STAR\u201d) to numeric scores (0.0\u20135.0).</p> <p>Parameters:</p> Name In Type Required Description <code>page</code> query integer No Page number (1-based; default: 1) <code>page_size</code> query integer No Items per page (1\u2013100; default: 10) <code>Company filters</code> query various No <code>geography</code>, <code>geography_code</code>, <code>sector</code>, <code>ca100_focus_company</code>, <code>large_medium_classification</code>, <code>isins</code> (string or array), <code>sedol</code> (string or array) <code>MQ filters</code> query various No <code>assessment_year</code> (int), <code>mq_levels</code> (array[int]), <code>level</code> (array[int]) <p>MQ filters detailed: assessment_year: integer, e.g. <code>2023</code> mq_levels: list of specific MQ Level IDs to include (e.g. <code>1,2,3</code>) level: list of Overall Management Levels to include  </p> <p>Response Format: </p> <p>A <code>PaginatedMQResponse</code> object with:</p> <ul> <li><code>total_records</code> (integer): total matching records  </li> <li><code>page</code> (integer): current page number  </li> <li><code>page_size</code> (integer): items per page  </li> <li><code>results</code> (array of <code>MQAssessmentDetail</code>), each containing:  </li> <li><code>company_id</code> (string)  </li> <li><code>name</code> (string)  </li> <li><code>sector</code> (string or null)  </li> <li><code>geography</code> (string or null)  </li> <li><code>latest_assessment_year</code> (integer or null)  </li> <li><code>management_quality_score</code> (float or null)  </li> </ul> <pre><code>{\n  \"total_records\": 150,\n  \"page\": 1,\n  \"page_size\": 10,\n  \"results\": [\n    {\n      \"company_id\": \"acme_corp\",\n      \"name\": \"Acme Corporation\",\n      \"sector\": \"Energy\",\n      \"geography\": \"United Kingdom\",\n      \"latest_assessment_year\": 2024,\n      \"management_quality_score\": 4.0\n    },\n    ...\n  ]\n}\n</code></pre> <p>Error Responses:</p> <ul> <li> <p>503 Service Unavailable</p> <p><code>json { \"detail\": \"MQ dataset is not available.\" }</code></p> </li> <li> <p>422 Unprocessable Entity <code>json     { \"detail\": \"MQ Levels are not valid: [6]\" }</code></p> </li> <li> <p>500 Internal Server Error</p> <p><code>json { \"detail\": \"&lt;error message&gt;\" }</code> </p> </li> </ul>"},{"location":"MQ_EP/#2-retrieve-mq-by-methodology-cycle","title":"2. Retrieve MQ by Methodology Cycle","text":"<p>HTTP Method: <code>GET</code> </p> <p>Path: <code>/v1/mq/methodology/{methodology_id}</code> </p> <p>Purpose: Fetch all MQ assessments from a specific research methodology cycle, allowing you to compare governance ratings across versions.</p> <p>Parameters:</p> Name In Type Required Description <code>methodology_id</code> path integer Yes Methodology cycle number (1 to N, where N = number of MQ CSV files detected) <code>page</code> query integer No Page number (1-based; default: 1) <code>page_size</code> query integer No Items per page (1\u2013100; default: 10) <code>Company filters</code> query various No (See \u201cList Latest MQ Assessments\u201d) <code>MQ filters</code> query various No (See above) <p>Response Format: Same <code>PaginatedMQResponse</code> schema as above, with <code>results</code> showing only records from the specified cycle:</p> <pre><code>{\n  \"total_records\": 75,\n  \"page\": 1,\n  \"page_size\": 10,\n  \"results\": [\n    {\n      \"company_id\": \"acme_corp\",\n      \"name\": \"Acme Corporation\",\n      \"sector\": \"Energy\",\n      \"geography\": \"United Kingdom\",\n      \"latest_assessment_year\": 2023,\n      \"management_quality_score\": 3.2\n    },\n    ...\n  ]\n}\n</code></pre> <p>Error Responses:</p> <ul> <li> <p>503 Service Unavailable: MQ dataset is not available.</p> <p><code>json { \"detail\": \"MQ dataset is not available.\" }</code></p> </li> <li> <p>422 Unprocessable Entity: MQ Levels are not valid: [6]</p> <p><code>json { \"detail\": \"MQ Levels are not valid: [6]\" }</code></p> </li> <li> <p>500 Internal Server Error: unexpected processing error.</p> <p><code>json { \"detail\": \"&lt;error message&gt;\" }</code> </p> </li> </ul>"},{"location":"MQ_EP/#3-retrieve-mq-trends-by-sector","title":"3. Retrieve MQ Trends by Sector","text":"<p>HTTP Method: <code>GET</code> </p> <p>Path: <code>/v1/mq/trends/sector/{sector_id}</code> </p> <p>Purpose: Return management quality scores over time for all companies within a specific sector, enabling sector-wide trend analysis.</p> <p>Parameters:</p> Name In Type Required Description <code>sector_id</code> path string Yes Sector name (case-insensitive; trimmed) <code>page</code> query integer No Page number (1-based; default: 1) <code>page_size</code> query integer No Items per page (1\u2013100; default: 10) <code>Company filters</code> query various No (See \u201cList Latest MQ Assessments\u201d) <code>MQ filters</code> query various No (See above) <p>Response Format: A <code>PaginatedMQResponse</code> with <code>results</code> sorted by assessment date for the given sector:</p> <pre><code>{\n  \"total_records\": 30,\n  \"page\": 1,\n  \"page_size\": 10,\n  \"results\": [\n    {\n      \"company_id\": \"cement_co\",\n      \"name\": \"Cement Co\",\n      \"sector\": \"Cement\",\n      \"geography\": \"Germany\",\n      \"latest_assessment_year\": 2023,\n      \"management_quality_score\": 2.8\n    },\n    ...\n  ]\n}\n</code></pre> <p>Error Responses:</p> <ul> <li> <p>404 Not Found </p> <p><code>json { \"detail\": \"Company 'unknown_id' not found.\" }</code> </p> </li> <li> <p>500 Internal Server Error</p> <p><code>json { \"detail\": \"&lt;error message&gt;\" }</code> </p> </li> </ul>"},{"location":"MQ_EP/#design-notes","title":"Design Notes","text":"<ul> <li>STAR ratings are normalized via a fixed mapping (<code>0STAR</code> \u2192 0.0, \u2026, <code>5STAR</code> \u2192 5.0).</li> <li>Each CSV input file maps to a <code>methodology_cycle</code>, enabling cycle-based queries.</li> <li>Underlying handler logic reuses pagination, filtering, and sanitization from <code>BaseDataHandler</code>.</li> <li>All MQ endpoints are rate-limited to 100 requests/minute per IP.</li> </ul> <ol> <li> <p>Pydantic is a Python library for data validation and settings management using Python type annotations. It ensures that all input and output data conform to the defined schema, reducing runtime errors and improving code clarity.\u00a0\u21a9</p> </li> </ol>"},{"location":"Overview_Documentation/","title":"API Endpoints Overview","text":"<p>Welcome to the v1 API Endpoints guide for the TPI Assessment API. This section is your centralized reference for every read-only route available under the <code>/v1</code> prefix. Here you will find:</p> <ul> <li>A concise catalog of all endpoint groups (ASCOR, Company, CP, MQ) and their individual operations.  </li> <li>Clear descriptions of each route\u2019s intent, input parameters, and output shape\u2014without the noise of installation, authentication, or internal data structures.  </li> <li>Consistent formatting across sections so you can quickly locate how to list resources, fetch single items, apply filters, and handle errors.  </li> </ul> <p>Whether you are integrating TPI data into your application, prototyping dashboards, or building automated workflows, this overview ensures you understand:</p> <ol> <li>Who each endpoint serves (sovereigns vs. companies).  </li> <li>What data each group returns (country assessments, carbon alignments, governance scores).  </li> <li>How to interact in a standard way\u2014uniform URL patterns, pagination, filtering, and error semantics.  </li> </ol> <p>Use this guide as your roadmap: first skim the high-level group summaries below, then dive into the detailed markdown pages for concrete parameter tables, <code>curl</code> examples, response schemas, and design notes. By following these conventions, you\u2019ll integrate smoothly and avoid surprises as TPI evolves to future versions.  </p>"},{"location":"Overview_Documentation/#versioning-and-base-url","title":"Versioning and Base URL","text":"<ul> <li>All endpoints live under the <code>/v1</code> prefix. </li> <li>Versioning ensures that future changes (e.g. <code>/v2</code>) will not break existing integrations.</li> </ul>"},{"location":"Overview_Documentation/#common-conventions","title":"Common Conventions","text":"<ol> <li> <p>HTTP methods</p> <ul> <li><code>GET</code> for all read-only operations.</li> </ul> </li> <li> <p>Path parameters</p> <ul> <li>Always lowercase and URL-safe (e.g. <code>acme_corp</code>, <code>france</code>).</li> <li>Normalization is applied server-side (trim, lowercase, underscores).</li> </ul> </li> <li> <p>Query parameters &amp; filtering</p> <ul> <li>Pagination: nearly every \u201clist\u201d endpoint supports <code>page</code> (1-based) and <code>per_page</code> (1\u2013100).</li> <li>Company filters (applies to Company, CP, MQ lists and histories): <code>geography</code>, <code>geography_code</code>, <code>sector</code>, <code>ca100_focus_company</code>, <code>large_medium_classification</code>, <code>isins</code>, <code>sedol</code>.</li> <li>MQ-specific filters: <code>assessment_year</code>, <code>mq_levels</code>, <code>level</code>.</li> <li>No filtering on the ASCOR \u201clist countries\u201d endpoint\u2014only on the Company/CP/MQ groups.</li> </ul> </li> <li> <p>Response models</p> <ul> <li>Defined via Pydantic schemas.</li> <li>Guarantee consistent field names, types, and default values.</li> <li>Enables automatic Swagger/OpenAPI documentation.</li> </ul> </li> <li> <p>Error handling</p> <ul> <li>404 Not Found when a resource (country or company) does not exist.</li> <li>422 Unprocessable Entity for invalid query values (e.g. bad MQ level).</li> <li>500 Internal Server Error for any unexpected failure.</li> <li>503 Service Unavailable when a required data column or file is missing.</li> <li>All errors return <code>{ \"detail\": \"\u2026\" }</code>.</li> </ul> </li> <li> <p>Rate limits</p> <ul> <li>Default: 100 requests/minute per IP.</li> <li>CP \u201clatest\u201d endpoint: stricter at 2 requests/minute to curb heavy full-dataset scans.</li> </ul> </li> </ol>"},{"location":"Overview_Documentation/#endpoints","title":"Endpoints","text":"<ol> <li> <p>ASCOR Endpoints</p> <p>Purpose: Serve sovereign climate assessments (three pillars: EP, CP, CF) at the country level.</p> <ul> <li><code>GET /v1/countries</code> List all countries with any ASCOR data.</li> <li><code>GET /v1/country-data/{country}/{year}</code> Fetch pillar-and-indicator details for a single country &amp; assessment year.</li> </ul> </li> <li> <p>Company Endpoints</p> <p>Purpose: Expose combined Management Quality (MQ) &amp; Carbon Performance (CP) scores for listed companies.</p> <ul> <li><code>GET /v1/companies</code> Paginated list of companies + latest assessment year + basic info.</li> <li><code>GET /v1/company/{company_id}</code> Latest MQ score, 2035 CP alignment, and emissions trend for one company.</li> <li><code>GET /v1/company/{company_id}/history</code> Full chronological MQ &amp; CP record for one company.</li> <li><code>GET /v1/company/{company_id}/performance-comparison</code> Year-over-year comparison of the two most recent MQ &amp; CP assessments.</li> </ul> </li> <li> <p>CP Endpoints</p> <p>Purpose: Focus purely on decadal Carbon Performance metrics for each company.</p> <ul> <li><code>GET /v1/cp/latest</code> Latest alignment status (2025, 2027, 2035, 2050) for every company, paginated.</li> <li><code>GET /v1/cp/company/{company_id}</code> Entire CP time-series for one company.</li> <li><code>GET /v1/cp/company/{company_id}/alignment</code> Quick map of latest CP alignment by target year.</li> <li><code>GET /v1/cp/company/{company_id}/comparison</code> Compare the two most recent CP cycles for a specified company.</li> </ul> </li> <li> <p>MQ Endpoints</p> <p>Purpose: Deliver governance-focused STAR-based ratings (0\u20135) from successive MQ cycles.</p> <ul> <li><code>GET /v1/mq/latest</code> Latest STAR score per company, numeric-mapped and paginated.</li> <li><code>GET /v1/mq/methodology/{id}</code> All MQ ratings for a specific research methodology cycle.</li> <li><code>GET /v1/mq/trends/sector/{sector_id}</code> Sequence of MQ scores over time for companies in one sector.</li> </ul> </li> </ol>"},{"location":"Overview_Home/","title":"TPI Assessment API \u2014 Overview","text":"<p>Welcome to the official documentation site for the TPI Assessment API \u2014 a FastAPI-based application that enables programmatic access to sovereign and corporate climate assessments developed by the Transition Pathway Initiative Centre. This landing page will help you get oriented quickly and direct you to the resources you need.</p>"},{"location":"Overview_Home/#what-this-api-does","title":"What This API Does","text":"<p>The TPI Assessment API allows developers, researchers, and data analysts to retrieve, compare, and analyze data from major TPI assessment frameworks:</p> <ul> <li>ASCOR: Assessing Sovereign Climate-related Opportunities and Risks</li> <li>Carbon Performance (CP)</li> <li>Management Quality (MQ)</li> <li>Corporate Assessments</li> </ul> <p>Whether you're building dashboards, conducting climate-financial research, or integrating ESG data into applications, this API helps you fetch structured climate data for sovereigns and companies alike.</p>"},{"location":"Overview_Home/#use-cases","title":"Use Cases","text":"<p>You can use the API to: - Retrieve ASCOR scores for a country - Compare a company\u2019s performance across assessment cycles - Query MQ or CP data by sector or region - Build automated pipelines for ESG data updates - Integrate with dashboards (e.g., Power BI, Tableau)</p>"},{"location":"Overview_Home/#how-it-works-high-level-flow","title":"How It Works (High-Level Flow)","text":"<ol> <li>Choose your request type (e.g. ASCOR, MQ, CP, Company)  </li> <li>Send a GET request to the appropriate endpoint  </li> <li>Receive a structured JSON response with normalized, up-to-date assessment data  </li> </ol>"},{"location":"Overview_Home/#key-features","title":"Key Features","text":"<ul> <li>RESTful API built with FastAPI  </li> <li>Sovereign &amp; corporate climate assessments (ASCOR, CP, MQ)  </li> <li>Sector &amp; company filtering  </li> <li>Cycle-by-cycle comparisons  </li> <li>Built-in pagination and efficient querying  </li> <li>Interactive API docs in Documentation </li> <li>Robust error handling and validation with Pydantic  </li> </ul> <p>See Tutorial to understand how to use the api</p>"},{"location":"api-playground/","title":"API Playground","text":"<p>Welcome! You can try our live API directly from here. Expand an endpoint, click Try it out, fill in the fields, and hit Execute.</p> <p></p>"}]}